Now, we have kind of code left...





Create the file name with "cloudinary.ts" in just inside the folder of "config"...


and insert that code on it...


********************
*                  *                                                                                 
*   CODE           *                                                                                 
*                  *                                                                                 
********************  In cloudinary.ts

import { v2 as cloudinary } from 'cloudinary';
import { config } from './config';


// Configuration
cloudinary.config({ 
    cloud_name: config.cloudinaryCloud, 
    api_key: config.cloudinaryApiKey, 
    api_secret: config.cloudinarySecret, // Click 'View Credentials' below to copy your API secret
});


export default cloudinary;

********************
********************









********************
*                  *                                                                                 
*   CODE           *                                                                                 
*                  *                                                                                 
********************  In config.ts

import {config as conf} from "dotenv";

conf ();

const _config = {
    prot: process.env.PORT,
    databseURL: process.env.MONGO_CONNECTION_STRING,
    env: process.env.NODE_ENV,
    jwtSecret: process.env.JWT_SECRET,
    cloudinaryCloud: process.env.CLOUDYNARY_CLOUD,
    cloudinaryApiKey: process.env.CLOUDYNARY_KEY,
    cloudinarySecret: process.env.CLOUDYNARY_SECRET,
    frontedDomain: process.env.FRONTED_DOMAIN,
};



export const config = Object.freeze(_config);

********************
********************






Now, create the File name with "authenticate.ts" in just inside the folder of "middlewares"...








********************
*                  *                                                                                 
*   CODE           *                                                                                 
*                  *                                                                                 
********************  In authenticate.ts

import { NextFunction, Request, Response } from "express";
import createHttpError from "http-errors";
import { verify } from "jsonwebtoken";
import { config } from "../config/config";

export interface AuthRequest extends Request {
    userId: string;
}

const authenticate = (req: Request, res: Response,  next:NextFunction) => {

    const token = req.header("Authorization");
    if(!token) {
        return next(createHttpError(401, "Authorization token is required..."));
    }

    

    // verified the token here...

    try {
        const passedToken = token.split(" ")[1];

    const decoded = verify(passedToken, config.jwtSecret as string);
    const _req = req as AuthRequest;
    _req.userId = decoded.sub as string;

    next();

    } catch (err) {
        return next(createHttpError(401, "Token expired!"));
    }




};

export default authenticate;

********************
********************









********************
*                  *                                                                                 
*   CODE           *                                                                                 
*                  *                                                                                 
********************  In app.ts

import express, { NextFunction, Request, Response } from "express";
import globalErrorHandlers from "./middlewares/globalErrorHandlers";
import userRouter from './user/userRouter';
import bookRouter from './book/bookRouter';
import cors from "cors";
import { config } from "./config/config";


const app = express();

app.use(cors({
    origin: config.frontedDomain,
}));

app.use(express.json());

// Routes
//Http method : GET, POST, PUT, PATCH, DELETE
// eslint-disable-next-line @typescript-eslint/no-unused-vars
app.get('/', (req: Request, res:Response, next: NextFunction) => {
    
    res.json({message: "Hi there, what's going on there..."});
    
});

app.use("/api/users" ,userRouter);
app.use("/api/books" ,bookRouter);

// Global error handler
// Middleware

app.use(globalErrorHandlers);

export default app;

********************
********************








********************
*                  *                                                                                 
*   CODE           *                                                                                 
*                  *                                                                                 
********************  In .env

PORT=4000

MONGO_CONNECTION_STRING=mongodb+srv://#########:#########@apinext.8w6si1z.mongodb.net/?retryWrites=true&w=majority&appName=APINEXT

NODE_ENV=development

JWT_SECRET=cbhuebcjhlkdnnckjdnckdj

CLOUDYNARY_CLOUD=##############

CLOUDYNARY_KEY=##############

CLOUDYNARY_SECRET=##############

FRONTED_DOMAIN=http://localhost:3000

********************
********************








Got it...














